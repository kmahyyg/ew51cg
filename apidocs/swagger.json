{
  "swagger": "2.0",
  "info": {
    "description": "This is the part of Anti12306 OCR Computer Vision Project which was built for research purposes only. Any illegal usage will be reported immediately to the Public Security Office. Your connection information will be logged. Please follow this document strictly while developing software or using.",
    "version": "0.5",
    "title": "Anti12306 Web API",
    "termsOfService": "https://anti12306.55lovecn.top/ToS.html",
    "contact": {
      "email": "i@kmahyyg.xyz"
    },
    "license": {
      "name": "GNU Affero General Public License version 3",
      "url": "http://www.gnu.org/licenses/fdl-1.3.html"
    }
  },
  "host": "anti12306.55lovecn.top",
  "basePath": "/api",
  "tags": [
    {
      "name": "user",
      "description": "The document for general users"
    },
    {
      "name": "dev",
      "description": "The document for developers",
      "externalDocs": {
        "description": "The source code",
        "url": "https://github.com/kmahyyg/ew51cg"
      }
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "X-APIKEY",
      "in": "header"
    },
    "user_token": {
      "type": "apiKey",
      "in": "header",
      "name": "X-User-Token"
    },
    "gateway": {
      "type": "apiKey",
      "in": "header",
      "name": "X-blahblah",
      "description": "Gateway defined authentication method"
    },
    "localhost": {
      "type": "apiKey",
      "name": "Origin",
      "in": "header",
      "description": "Origin must be 127.0.0.1 and User-agent must start with \"curl/7\""
    }
  },
  "definitions": {
    "ErrResponse": {
      "type": "object",
      "properties": {
        "retcode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code"
        },
        "retmsg": {
          "type": "string",
          "description": "Error message or Notification Message."
        }
      }
    },
    "AuthenticatedResponse": {
      "type": "object",
      "properties": {
        "retcode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code"
        },
        "token": {
          "type": "string",
          "format": "string",
          "description": "Session Token, must be saved to LocalStorage named \"X-User-Token\"."
        }
      }
    },
    "OrderResponse": {
      "type": "object",
      "properties": {
        "retcode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code"
        },
        "orderid": {
          "type": "string",
          "description": "Order ID in the internal system"
        }
      }
    },
    "AfterPayResponse": {
      "type": "object",
      "properties": {
        "orderid": {
          "type": "string",
          "description": "Order ID in the internal system"
        },
        "timestamp": {
          "type": "string",
          "description": "Submit Timestamp"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Top-up amount. The user balance will showed in Coins. Coins = RMB * 100."
        },
        "resp": {
          "type": "string",
          "description": "Payment status from the gateway",
          "enum": [
            "success",
            "failed",
            "created",
            "fraud"
          ]
        }
      }
    },
    "AfterRecognitionResponse": {
      "type": "object",
      "properties": {
        "eventid": {
          "type": "string",
          "description": "This upload event UUID, used for error reporting"
        },
        "retcode": {
          "type": "integer",
          "format": "int32"
        },
        "retmsg": {
          "type": "string",
          "description": "If retcode == 0, return the result of OCR. Else, return the error message."
        },
        "balance": {
          "type": "number",
          "format": "float",
          "description": "After this recognition event, the account balance of current account. "
        }
      }
    },
    "UserStats": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "User name"
        },
        "is_vip": {
          "type": "boolean",
          "description": "If true, this user topup-ed more than 100 RMB, is a VIP. He will get 33% discount."
        },
        "apikey": {
          "type": "string",
          "description": "Batch processing API key. Let user keep it secret and saved in a safe place."
        },
        "balance": {
          "type": "number",
          "format": "float",
          "description": "The user's current balance."
        },
        "break_law": {
          "type": "boolean",
          "description": "If true, this user abused the API ToS. Not allowed to login."
        }
      }
    },
    "UploadEventResponse": {
      "type": "object",
      "properties": {
        "eventid": {
          "type": "string",
          "description": "Event ID in the response after recognition."
        },
        "timestamp": {
          "type": "string",
          "description": "UTC timestamp when the upload event is recorded."
        },
        "cost": {
          "type": "number",
          "format": "float",
          "description": "This event costs users N coins to recognize."
        }
      }
    },
    "ReviewUpldEvent": {
      "type": "object",
      "properties": {
        "retcode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code"
        },
        "uploadevents": {
          "type": "array",
          "description": "The events waiting to be reviewed.",
          "items": {
            "type": "object",
            "properties": {
              "eventid": {
                "type": "string",
                "description": "Event ID in the response after recognition."
              },
              "photo": {
                "type": "string",
                "description": "Base64-encoded Photo DataURL."
              },
              "content": {
                "type": "string",
                "description": "Recognition result."
              }
            }
          }
        }
      }
    },
    "UploadHistory": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "User name"
        },
        "uploadevents": {
          "type": "array",
          "description": "Array of the upload events. Upload event example is in the properties.",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UploadEventResponse"
          }
        }
      }
    }
  },
  "paths": {
    "/user/login": {
      "post": {
        "tags": [
          "dev"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "userLogin",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "username",
            "required": true,
            "type": "string",
            "description": "Username"
          },
          {
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string",
            "description": "Password in clear text"
          },
          {
            "in": "formData",
            "name": "_",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Login Timestamp in UTC"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in. ",
            "schema": {
              "$ref": "#/definitions/AuthenticatedResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "403": {
            "description": "Password incorrect or Permission Denied or User doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Server internal error.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/user/createOrder": {
      "post": {
        "tags": [
          "dev"
        ],
        "summary": "Recharge to the balance",
        "description": "User balance top-up",
        "operationId": "rechargeStart",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "User name"
                },
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "Top up amount"
                },
                "payment": {
                  "type": "string",
                  "enum": [
                    "alipay",
                    "py-pay"
                  ]
                }
              }
            }
          }
        ],
        "security": [
          {
            "user_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Order successfully created. Please call /user/checkOrder to check.",
            "schema": {
              "$ref": "#/definitions/OrderResponse"
            }
          },
          "400": {
            "description": "Invalid format in body",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "403": {
            "description": "Token not included.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "dev"
        ],
        "summary": "Revoke current session token",
        "description": "Logout this user's current session. Revoke related token in the database.",
        "security": [
          {
            "user_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Server already proceeded the request."
          },
          "400": {
            "description": "Invalid request."
          }
        }
      }
    },
    "/user/checkOrder": {
      "get": {
        "tags": [
          "dev"
        ],
        "summary": "Check if the order paid successfully.",
        "description": "Order is paid or not.",
        "operationId": "orderPaidOrNOT",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "security": [
          {
            "user_token": []
          }
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "orderID",
            "required": true,
            "type": "string",
            "description": "Order to be checked."
          }
        ],
        "responses": {
          "200": {
            "description": "Order status",
            "schema": {
              "$ref": "#/definitions/AfterPayResponse"
            }
          },
          "403": {
            "description": "User token not included or param is null.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/user/getUser": {
      "get": {
        "tags": [
          "dev"
        ],
        "security": [
          {
            "user_token": []
          }
        ],
        "summary": "User status and level",
        "description": "This API is used to build the user dashboard page. Will show user's level, balance and name.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User is already logged in. Get the status.",
            "schema": {
              "$ref": "#/definitions/UserStats"
            }
          },
          "403": {
            "description": "User Token is expired or revoked. Or this user is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/user/getHistory": {
      "get": {
        "tags": [
          "dev"
        ],
        "security": [
          {
            "user_token": []
          }
        ],
        "summary": "Current user upload events list.",
        "description": "This API is used to get the users upload history from its born.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Upload history list. Shown in a table. If response array is null, this user have submitted nothing till now.",
            "schema": {
              "$ref": "#/definitions/UploadHistory"
            }
          },
          "403": {
            "description": "User token is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/admin/review": {
      "post": {
        "tags": [
          "dev",
          "maintainer"
        ],
        "security": [
          {
            "user_token": []
          }
        ],
        "summary": "Upload the verified response for an upload event",
        "description": "When admin clicked allow button to allow a refund.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "eventid",
            "type": "string",
            "required": true,
            "description": "Corresponding event ID which was failed to recognize"
          }
        ],
        "responses": {
          "200": {
            "description": "Proceeded.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "403": {
            "description": "Unauthorized user.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dev",
          "maintainer"
        ],
        "security": [
          {
            "user_token": []
          }
        ],
        "summary": "Fetch events for manual review",
        "description": "Fetch events for manual review, only can be used by administrator, which will return a photo dataurl and corresponding eventid",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Events to be reviewed.",
            "schema": {
              "$ref": "#/definitions/ReviewUpldEvent"
            }
          },
          "204": {
            "description": "No event is waiting to be reviewed."
          },
          "403": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/startOCR": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Get OCR Result of uploaded photo",
        "description": "Use this API in userspace to get the OCR result of the captcha image.",
        "security": [
          {
            "api_key": []
          },
          {
            "user_token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "photo",
            "type": "string",
            "description": "Original CAPTCHA image encoded in Base64.",
            "required": true
          },
          {
            "in": "formData",
            "name": "timestamp",
            "type": "integer",
            "format": "int32",
            "description": "UTC Timestamp when submit."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully recognized. Costed n*15 coins. n is the number of the chinese characters in a photo.",
            "schema": {
              "$ref": "#/definitions/AfterRecognitionResponse"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "403": {
            "description": "Identification failed. Invalid user token or API key.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Internal server error or recognize failed. Response maybe empty.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/report/error": {
      "post": {
        "tags": [
          "dev",
          "user"
        ],
        "security": [
          {
            "user_token": []
          },
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "summary": "Recognition is not corresponding to the photo. Ask a refund.",
        "description": "The recognition may not correct. So we cannot let user pay for that. Just do a refund.",
        "parameters": [
          {
            "in": "formData",
            "name": "eventid",
            "type": "string",
            "required": true,
            "description": "The eventid in response after recognition."
          },
          {
            "in": "formData",
            "name": "timestamp",
            "description": "UTC timestamp when submit.",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Proceeded result returned from server.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "400": {
            "description": "Request body is malformed.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "403": {
            "description": "Usertoken is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/payment/callback": {
      "post": {
        "tags": [
          "dev"
        ],
        "security": [
          {
            "gateway": []
          }
        ],
        "summary": "Under construction",
        "description": "Preserve API for cooperate with payment gateway.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Done.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            },
            "examples": {
              "application/json": {
                "retcode": -1,
                "retmsg": "Under construction"
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          }
        }
      }
    },
    "/cron": {
      "options": {
        "tags": [
          "dev",
          "maintainer"
        ],
        "security": [
          {
            "localhost": []
          }
        ],
        "summary": "Running at localhost for cleanup",
        "description": "Cleanup expired session and run cron-ed job like refund",
        "responses": {
          "204": {
            "description": "Successfully finished"
          },
          "403": {
            "description": "Remote access is not allowed"
          },
          "500": {
            "description": "Server internal error.",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    }
  }
}